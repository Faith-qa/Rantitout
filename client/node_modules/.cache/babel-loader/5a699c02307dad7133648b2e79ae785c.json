{"ast":null,"code":"'use strict';\n\nimport bind from './helpers/bind.js'; // utils is a library of generic helper functions non-specific to axios\n\nconst {\n  toString\n} = Object.prototype;\nconst {\n  getPrototypeOf\n} = Object;\n\nconst kindOf = (cache => thing => {\n  const str = toString.call(thing);\n  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\n})(Object.create(null));\n\nconst kindOfTest = type => {\n  type = type.toLowerCase();\n  return thing => kindOf(thing) === type;\n};\n\nconst typeOfTest = type => thing => typeof thing === type;\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n *\n * @returns {boolean} True if value is an Array, otherwise false\n */\n\n\nconst {\n  isArray\n} = Array;\n/**\n * Determine if a value is undefined\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if the value is undefined, otherwise false\n */\n\nconst isUndefined = typeOfTest('undefined');\n/**\n * Determine if a value is a Buffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\n\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);\n}\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\n\n\nconst isArrayBuffer = kindOfTest('ArrayBuffer');\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\n\nfunction isArrayBufferView(val) {\n  let result;\n\n  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = val && val.buffer && isArrayBuffer(val.buffer);\n  }\n\n  return result;\n}\n/**\n * Determine if a value is a String\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a String, otherwise false\n */\n\n\nconst isString = typeOfTest('string');\n/**\n * Determine if a value is a Function\n *\n * @param {*} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\n\nconst isFunction = typeOfTest('function');\n/**\n * Determine if a value is a Number\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Number, otherwise false\n */\n\nconst isNumber = typeOfTest('number');\n/**\n * Determine if a value is an Object\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an Object, otherwise false\n */\n\nconst isObject = thing => thing !== null && typeof thing === 'object';\n/**\n * Determine if a value is a Boolean\n *\n * @param {*} thing The value to test\n * @returns {boolean} True if value is a Boolean, otherwise false\n */\n\n\nconst isBoolean = thing => thing === true || thing === false;\n/**\n * Determine if a value is a plain Object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a plain Object, otherwise false\n */\n\n\nconst isPlainObject = val => {\n  if (kindOf(val) !== 'object') {\n    return false;\n  }\n\n  const prototype = getPrototypeOf(val);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);\n};\n/**\n * Determine if a value is a Date\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Date, otherwise false\n */\n\n\nconst isDate = kindOfTest('Date');\n/**\n * Determine if a value is a File\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\n\nconst isFile = kindOfTest('File');\n/**\n * Determine if a value is a Blob\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Blob, otherwise false\n */\n\nconst isBlob = kindOfTest('Blob');\n/**\n * Determine if a value is a FileList\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\n\nconst isFileList = kindOfTest('FileList');\n/**\n * Determine if a value is a Stream\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Stream, otherwise false\n */\n\nconst isStream = val => isObject(val) && isFunction(val.pipe);\n/**\n * Determine if a value is a FormData\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an FormData, otherwise false\n */\n\n\nconst isFormData = thing => {\n  const pattern = '[object FormData]';\n  return thing && (typeof FormData === 'function' && thing instanceof FormData || toString.call(thing) === pattern || isFunction(thing.toString) && thing.toString() === pattern);\n};\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\n\n\nconst isURLSearchParams = kindOfTest('URLSearchParams');\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n *\n * @returns {String} The String freed of excess whitespace\n */\n\nconst trim = str => str.trim ? str.trim() : str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n *\n * @param {Boolean} [allOwnKeys = false]\n * @returns {any}\n */\n\n\nfunction forEach(obj, fn) {\n  let {\n    allOwnKeys = false\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  let i;\n  let l; // Force an array if not already something iterable\n\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);\n    const len = keys.length;\n    let key;\n\n    for (i = 0; i < len; i++) {\n      key = keys[i];\n      fn.call(null, obj[key], key, obj);\n    }\n  }\n}\n\nfunction findKey(obj, key) {\n  key = key.toLowerCase();\n  const keys = Object.keys(obj);\n  let i = keys.length;\n\n  let _key;\n\n  while (i-- > 0) {\n    _key = keys[i];\n\n    if (key === _key.toLowerCase()) {\n      return _key;\n    }\n  }\n\n  return null;\n}\n\nconst _global = typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self;\n\nconst isContextDefined = context => !isUndefined(context) && context !== _global;\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n *\n * @returns {Object} Result of all merge properties\n */\n\n\nfunction\n  /* obj1, obj2, obj3, ... */\nmerge() {\n  const {\n    caseless\n  } = isContextDefined(this) && this || {};\n  const result = {};\n\n  const assignValue = (val, key) => {\n    const targetKey = caseless && findKey(result, key) || key;\n\n    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {\n      result[targetKey] = merge(result[targetKey], val);\n    } else if (isPlainObject(val)) {\n      result[targetKey] = merge({}, val);\n    } else if (isArray(val)) {\n      result[targetKey] = val.slice();\n    } else {\n      result[targetKey] = val;\n    }\n  };\n\n  for (let i = 0, l = arguments.length; i < l; i++) {\n    arguments[i] && forEach(arguments[i], assignValue);\n  }\n\n  return result;\n}\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n *\n * @param {Boolean} [allOwnKeys]\n * @returns {Object} The resulting value of object a\n */\n\n\nconst extend = function (a, b, thisArg) {\n  let {\n    allOwnKeys\n  } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  forEach(b, (val, key) => {\n    if (thisArg && isFunction(val)) {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  }, {\n    allOwnKeys\n  });\n  return a;\n};\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n *\n * @returns {string} content value without BOM\n */\n\n\nconst stripBOM = content => {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n\n  return content;\n};\n/**\n * Inherit the prototype methods from one constructor into another\n * @param {function} constructor\n * @param {function} superConstructor\n * @param {object} [props]\n * @param {object} [descriptors]\n *\n * @returns {void}\n */\n\n\nconst inherits = (constructor, superConstructor, props, descriptors) => {\n  constructor.prototype = Object.create(superConstructor.prototype, descriptors);\n  constructor.prototype.constructor = constructor;\n  Object.defineProperty(constructor, 'super', {\n    value: superConstructor.prototype\n  });\n  props && Object.assign(constructor.prototype, props);\n};\n/**\n * Resolve object with deep prototype chain to a flat object\n * @param {Object} sourceObj source object\n * @param {Object} [destObj]\n * @param {Function|Boolean} [filter]\n * @param {Function} [propFilter]\n *\n * @returns {Object}\n */\n\n\nconst toFlatObject = (sourceObj, destObj, filter, propFilter) => {\n  let props;\n  let i;\n  let prop;\n  const merged = {};\n  destObj = destObj || {}; // eslint-disable-next-line no-eq-null,eqeqeq\n\n  if (sourceObj == null) return destObj;\n\n  do {\n    props = Object.getOwnPropertyNames(sourceObj);\n    i = props.length;\n\n    while (i-- > 0) {\n      prop = props[i];\n\n      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {\n        destObj[prop] = sourceObj[prop];\n        merged[prop] = true;\n      }\n    }\n\n    sourceObj = filter !== false && getPrototypeOf(sourceObj);\n  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\n\n  return destObj;\n};\n/**\n * Determines whether a string ends with the characters of a specified string\n *\n * @param {String} str\n * @param {String} searchString\n * @param {Number} [position= 0]\n *\n * @returns {boolean}\n */\n\n\nconst endsWith = (str, searchString, position) => {\n  str = String(str);\n\n  if (position === undefined || position > str.length) {\n    position = str.length;\n  }\n\n  position -= searchString.length;\n  const lastIndex = str.indexOf(searchString, position);\n  return lastIndex !== -1 && lastIndex === position;\n};\n/**\n * Returns new array from array like object or null if failed\n *\n * @param {*} [thing]\n *\n * @returns {?Array}\n */\n\n\nconst toArray = thing => {\n  if (!thing) return null;\n  if (isArray(thing)) return thing;\n  let i = thing.length;\n  if (!isNumber(i)) return null;\n  const arr = new Array(i);\n\n  while (i-- > 0) {\n    arr[i] = thing[i];\n  }\n\n  return arr;\n};\n/**\n * Checking if the Uint8Array exists and if it does, it returns a function that checks if the\n * thing passed in is an instance of Uint8Array\n *\n * @param {TypedArray}\n *\n * @returns {Array}\n */\n// eslint-disable-next-line func-names\n\n\nconst isTypedArray = (TypedArray => {\n  // eslint-disable-next-line func-names\n  return thing => {\n    return TypedArray && thing instanceof TypedArray;\n  };\n})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));\n/**\n * For each entry in the object, call the function with the key and value.\n *\n * @param {Object<any, any>} obj - The object to iterate over.\n * @param {Function} fn - The function to call for each entry.\n *\n * @returns {void}\n */\n\n\nconst forEachEntry = (obj, fn) => {\n  const generator = obj && obj[Symbol.iterator];\n  const iterator = generator.call(obj);\n  let result;\n\n  while ((result = iterator.next()) && !result.done) {\n    const pair = result.value;\n    fn.call(obj, pair[0], pair[1]);\n  }\n};\n/**\n * It takes a regular expression and a string, and returns an array of all the matches\n *\n * @param {string} regExp - The regular expression to match against.\n * @param {string} str - The string to search.\n *\n * @returns {Array<boolean>}\n */\n\n\nconst matchAll = (regExp, str) => {\n  let matches;\n  const arr = [];\n\n  while ((matches = regExp.exec(str)) !== null) {\n    arr.push(matches);\n  }\n\n  return arr;\n};\n/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */\n\n\nconst isHTMLForm = kindOfTest('HTMLFormElement');\n\nconst toCamelCase = str => {\n  return str.toLowerCase().replace(/[_-\\s]([a-z\\d])(\\w*)/g, function replacer(m, p1, p2) {\n    return p1.toUpperCase() + p2;\n  });\n};\n/* Creating a function that will check if an object has a property. */\n\n\nconst hasOwnProperty = (_ref => {\n  let {\n    hasOwnProperty\n  } = _ref;\n  return (obj, prop) => hasOwnProperty.call(obj, prop);\n})(Object.prototype);\n/**\n * Determine if a value is a RegExp object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a RegExp object, otherwise false\n */\n\n\nconst isRegExp = kindOfTest('RegExp');\n\nconst reduceDescriptors = (obj, reducer) => {\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  const reducedDescriptors = {};\n  forEach(descriptors, (descriptor, name) => {\n    if (reducer(descriptor, name, obj) !== false) {\n      reducedDescriptors[name] = descriptor;\n    }\n  });\n  Object.defineProperties(obj, reducedDescriptors);\n};\n/**\n * Makes all methods read-only\n * @param {Object} obj\n */\n\n\nconst freezeMethods = obj => {\n  reduceDescriptors(obj, (descriptor, name) => {\n    // skip restricted props in strict mode\n    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {\n      return false;\n    }\n\n    const value = obj[name];\n    if (!isFunction(value)) return;\n    descriptor.enumerable = false;\n\n    if ('writable' in descriptor) {\n      descriptor.writable = false;\n      return;\n    }\n\n    if (!descriptor.set) {\n      descriptor.set = () => {\n        throw Error('Can not rewrite read-only method \\'' + name + '\\'');\n      };\n    }\n  });\n};\n\nconst toObjectSet = (arrayOrString, delimiter) => {\n  const obj = {};\n\n  const define = arr => {\n    arr.forEach(value => {\n      obj[value] = true;\n    });\n  };\n\n  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));\n  return obj;\n};\n\nconst noop = () => {};\n\nconst toFiniteNumber = (value, defaultValue) => {\n  value = +value;\n  return Number.isFinite(value) ? value : defaultValue;\n};\n\nconst toJSONObject = obj => {\n  const stack = new Array(10);\n\n  const visit = (source, i) => {\n    if (isObject(source)) {\n      if (stack.indexOf(source) >= 0) {\n        return;\n      }\n\n      if (!('toJSON' in source)) {\n        stack[i] = source;\n        const target = isArray(source) ? [] : {};\n        forEach(source, (value, key) => {\n          const reducedValue = visit(value, i + 1);\n          !isUndefined(reducedValue) && (target[key] = reducedValue);\n        });\n        stack[i] = undefined;\n        return target;\n      }\n    }\n\n    return source;\n  };\n\n  return visit(obj, 0);\n};\n\nexport default {\n  isArray,\n  isArrayBuffer,\n  isBuffer,\n  isFormData,\n  isArrayBufferView,\n  isString,\n  isNumber,\n  isBoolean,\n  isObject,\n  isPlainObject,\n  isUndefined,\n  isDate,\n  isFile,\n  isBlob,\n  isRegExp,\n  isFunction,\n  isStream,\n  isURLSearchParams,\n  isTypedArray,\n  isFileList,\n  forEach,\n  merge,\n  extend,\n  trim,\n  stripBOM,\n  inherits,\n  toFlatObject,\n  kindOf,\n  kindOfTest,\n  endsWith,\n  toArray,\n  forEachEntry,\n  matchAll,\n  isHTMLForm,\n  hasOwnProperty,\n  hasOwnProp: hasOwnProperty,\n  // an alias to avoid ESLint no-prototype-builtins detection\n  reduceDescriptors,\n  freezeMethods,\n  toObjectSet,\n  toCamelCase,\n  noop,\n  toFiniteNumber,\n  findKey,\n  global: _global,\n  isContextDefined,\n  toJSONObject\n};","map":{"version":3,"sources":["/home/faith/personal_project/TalktoMe/client/node_modules/axios/lib/utils.js"],"names":["bind","toString","Object","prototype","getPrototypeOf","kindOf","cache","thing","str","call","slice","toLowerCase","create","kindOfTest","type","typeOfTest","isArray","Array","isUndefined","isBuffer","val","constructor","isFunction","isArrayBuffer","isArrayBufferView","result","ArrayBuffer","isView","buffer","isString","isNumber","isObject","isBoolean","isPlainObject","Symbol","toStringTag","iterator","isDate","isFile","isBlob","isFileList","isStream","pipe","isFormData","pattern","FormData","isURLSearchParams","trim","replace","forEach","obj","fn","allOwnKeys","i","l","length","keys","getOwnPropertyNames","len","key","findKey","_key","_global","self","global","isContextDefined","context","merge","caseless","assignValue","targetKey","arguments","extend","a","b","thisArg","stripBOM","content","charCodeAt","inherits","superConstructor","props","descriptors","defineProperty","value","assign","toFlatObject","sourceObj","destObj","filter","propFilter","prop","merged","endsWith","searchString","position","String","undefined","lastIndex","indexOf","toArray","arr","isTypedArray","TypedArray","Uint8Array","forEachEntry","generator","next","done","pair","matchAll","regExp","matches","exec","push","isHTMLForm","toCamelCase","replacer","m","p1","p2","toUpperCase","hasOwnProperty","isRegExp","reduceDescriptors","reducer","getOwnPropertyDescriptors","reducedDescriptors","descriptor","name","defineProperties","freezeMethods","enumerable","writable","set","Error","toObjectSet","arrayOrString","delimiter","define","split","noop","toFiniteNumber","defaultValue","Number","isFinite","toJSONObject","stack","visit","source","target","reducedValue","hasOwnProp"],"mappings":"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","sourcesContent":["'use strict';\n\nimport bind from './helpers/bind.js';\n\n// utils is a library of generic helper functions non-specific to axios\n\nconst {toString} = Object.prototype;\nconst {getPrototypeOf} = Object;\n\nconst kindOf = (cache => thing => {\n    const str = toString.call(thing);\n    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\n})(Object.create(null));\n\nconst kindOfTest = (type) => {\n  type = type.toLowerCase();\n  return (thing) => kindOf(thing) === type\n}\n\nconst typeOfTest = type => thing => typeof thing === type;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n *\n * @returns {boolean} True if value is an Array, otherwise false\n */\nconst {isArray} = Array;\n\n/**\n * Determine if a value is undefined\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nconst isUndefined = typeOfTest('undefined');\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nconst isArrayBuffer = kindOfTest('ArrayBuffer');\n\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  let result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a String, otherwise false\n */\nconst isString = typeOfTest('string');\n\n/**\n * Determine if a value is a Function\n *\n * @param {*} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nconst isFunction = typeOfTest('function');\n\n/**\n * Determine if a value is a Number\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Number, otherwise false\n */\nconst isNumber = typeOfTest('number');\n\n/**\n * Determine if a value is an Object\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an Object, otherwise false\n */\nconst isObject = (thing) => thing !== null && typeof thing === 'object';\n\n/**\n * Determine if a value is a Boolean\n *\n * @param {*} thing The value to test\n * @returns {boolean} True if value is a Boolean, otherwise false\n */\nconst isBoolean = thing => thing === true || thing === false;\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a plain Object, otherwise false\n */\nconst isPlainObject = (val) => {\n  if (kindOf(val) !== 'object') {\n    return false;\n  }\n\n  const prototype = getPrototypeOf(val);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Date, otherwise false\n */\nconst isDate = kindOfTest('Date');\n\n/**\n * Determine if a value is a File\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFile = kindOfTest('File');\n\n/**\n * Determine if a value is a Blob\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nconst isBlob = kindOfTest('Blob');\n\n/**\n * Determine if a value is a FileList\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFileList = kindOfTest('FileList');\n\n/**\n * Determine if a value is a Stream\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nconst isStream = (val) => isObject(val) && isFunction(val.pipe);\n\n/**\n * Determine if a value is a FormData\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nconst isFormData = (thing) => {\n  const pattern = '[object FormData]';\n  return thing && (\n    (typeof FormData === 'function' && thing instanceof FormData) ||\n    toString.call(thing) === pattern ||\n    (isFunction(thing.toString) && thing.toString() === pattern)\n  );\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nconst isURLSearchParams = kindOfTest('URLSearchParams');\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n *\n * @returns {String} The String freed of excess whitespace\n */\nconst trim = (str) => str.trim ?\n  str.trim() : str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n *\n * @param {Boolean} [allOwnKeys = false]\n * @returns {any}\n */\nfunction forEach(obj, fn, {allOwnKeys = false} = {}) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  let i;\n  let l;\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);\n    const len = keys.length;\n    let key;\n\n    for (i = 0; i < len; i++) {\n      key = keys[i];\n      fn.call(null, obj[key], key, obj);\n    }\n  }\n}\n\nfunction findKey(obj, key) {\n  key = key.toLowerCase();\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let _key;\n  while (i-- > 0) {\n    _key = keys[i];\n    if (key === _key.toLowerCase()) {\n      return _key;\n    }\n  }\n  return null;\n}\n\nconst _global = typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self;\n\nconst isContextDefined = (context) => !isUndefined(context) && context !== _global;\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n *\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  const {caseless} = isContextDefined(this) && this || {};\n  const result = {};\n  const assignValue = (val, key) => {\n    const targetKey = caseless && findKey(result, key) || key;\n    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {\n      result[targetKey] = merge(result[targetKey], val);\n    } else if (isPlainObject(val)) {\n      result[targetKey] = merge({}, val);\n    } else if (isArray(val)) {\n      result[targetKey] = val.slice();\n    } else {\n      result[targetKey] = val;\n    }\n  }\n\n  for (let i = 0, l = arguments.length; i < l; i++) {\n    arguments[i] && forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n *\n * @param {Boolean} [allOwnKeys]\n * @returns {Object} The resulting value of object a\n */\nconst extend = (a, b, thisArg, {allOwnKeys}= {}) => {\n  forEach(b, (val, key) => {\n    if (thisArg && isFunction(val)) {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  }, {allOwnKeys});\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n *\n * @returns {string} content value without BOM\n */\nconst stripBOM = (content) => {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\n/**\n * Inherit the prototype methods from one constructor into another\n * @param {function} constructor\n * @param {function} superConstructor\n * @param {object} [props]\n * @param {object} [descriptors]\n *\n * @returns {void}\n */\nconst inherits = (constructor, superConstructor, props, descriptors) => {\n  constructor.prototype = Object.create(superConstructor.prototype, descriptors);\n  constructor.prototype.constructor = constructor;\n  Object.defineProperty(constructor, 'super', {\n    value: superConstructor.prototype\n  });\n  props && Object.assign(constructor.prototype, props);\n}\n\n/**\n * Resolve object with deep prototype chain to a flat object\n * @param {Object} sourceObj source object\n * @param {Object} [destObj]\n * @param {Function|Boolean} [filter]\n * @param {Function} [propFilter]\n *\n * @returns {Object}\n */\nconst toFlatObject = (sourceObj, destObj, filter, propFilter) => {\n  let props;\n  let i;\n  let prop;\n  const merged = {};\n\n  destObj = destObj || {};\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  if (sourceObj == null) return destObj;\n\n  do {\n    props = Object.getOwnPropertyNames(sourceObj);\n    i = props.length;\n    while (i-- > 0) {\n      prop = props[i];\n      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {\n        destObj[prop] = sourceObj[prop];\n        merged[prop] = true;\n      }\n    }\n    sourceObj = filter !== false && getPrototypeOf(sourceObj);\n  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\n\n  return destObj;\n}\n\n/**\n * Determines whether a string ends with the characters of a specified string\n *\n * @param {String} str\n * @param {String} searchString\n * @param {Number} [position= 0]\n *\n * @returns {boolean}\n */\nconst endsWith = (str, searchString, position) => {\n  str = String(str);\n  if (position === undefined || position > str.length) {\n    position = str.length;\n  }\n  position -= searchString.length;\n  const lastIndex = str.indexOf(searchString, position);\n  return lastIndex !== -1 && lastIndex === position;\n}\n\n\n/**\n * Returns new array from array like object or null if failed\n *\n * @param {*} [thing]\n *\n * @returns {?Array}\n */\nconst toArray = (thing) => {\n  if (!thing) return null;\n  if (isArray(thing)) return thing;\n  let i = thing.length;\n  if (!isNumber(i)) return null;\n  const arr = new Array(i);\n  while (i-- > 0) {\n    arr[i] = thing[i];\n  }\n  return arr;\n}\n\n/**\n * Checking if the Uint8Array exists and if it does, it returns a function that checks if the\n * thing passed in is an instance of Uint8Array\n *\n * @param {TypedArray}\n *\n * @returns {Array}\n */\n// eslint-disable-next-line func-names\nconst isTypedArray = (TypedArray => {\n  // eslint-disable-next-line func-names\n  return thing => {\n    return TypedArray && thing instanceof TypedArray;\n  };\n})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));\n\n/**\n * For each entry in the object, call the function with the key and value.\n *\n * @param {Object<any, any>} obj - The object to iterate over.\n * @param {Function} fn - The function to call for each entry.\n *\n * @returns {void}\n */\nconst forEachEntry = (obj, fn) => {\n  const generator = obj && obj[Symbol.iterator];\n\n  const iterator = generator.call(obj);\n\n  let result;\n\n  while ((result = iterator.next()) && !result.done) {\n    const pair = result.value;\n    fn.call(obj, pair[0], pair[1]);\n  }\n}\n\n/**\n * It takes a regular expression and a string, and returns an array of all the matches\n *\n * @param {string} regExp - The regular expression to match against.\n * @param {string} str - The string to search.\n *\n * @returns {Array<boolean>}\n */\nconst matchAll = (regExp, str) => {\n  let matches;\n  const arr = [];\n\n  while ((matches = regExp.exec(str)) !== null) {\n    arr.push(matches);\n  }\n\n  return arr;\n}\n\n/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */\nconst isHTMLForm = kindOfTest('HTMLFormElement');\n\nconst toCamelCase = str => {\n  return str.toLowerCase().replace(/[_-\\s]([a-z\\d])(\\w*)/g,\n    function replacer(m, p1, p2) {\n      return p1.toUpperCase() + p2;\n    }\n  );\n};\n\n/* Creating a function that will check if an object has a property. */\nconst hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);\n\n/**\n * Determine if a value is a RegExp object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a RegExp object, otherwise false\n */\nconst isRegExp = kindOfTest('RegExp');\n\nconst reduceDescriptors = (obj, reducer) => {\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  const reducedDescriptors = {};\n\n  forEach(descriptors, (descriptor, name) => {\n    if (reducer(descriptor, name, obj) !== false) {\n      reducedDescriptors[name] = descriptor;\n    }\n  });\n\n  Object.defineProperties(obj, reducedDescriptors);\n}\n\n/**\n * Makes all methods read-only\n * @param {Object} obj\n */\n\nconst freezeMethods = (obj) => {\n  reduceDescriptors(obj, (descriptor, name) => {\n    // skip restricted props in strict mode\n    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {\n      return false;\n    }\n\n    const value = obj[name];\n\n    if (!isFunction(value)) return;\n\n    descriptor.enumerable = false;\n\n    if ('writable' in descriptor) {\n      descriptor.writable = false;\n      return;\n    }\n\n    if (!descriptor.set) {\n      descriptor.set = () => {\n        throw Error('Can not rewrite read-only method \\'' + name + '\\'');\n      };\n    }\n  });\n}\n\nconst toObjectSet = (arrayOrString, delimiter) => {\n  const obj = {};\n\n  const define = (arr) => {\n    arr.forEach(value => {\n      obj[value] = true;\n    });\n  }\n\n  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));\n\n  return obj;\n}\n\nconst noop = () => {}\n\nconst toFiniteNumber = (value, defaultValue) => {\n  value = +value;\n  return Number.isFinite(value) ? value : defaultValue;\n}\n\nconst toJSONObject = (obj) => {\n  const stack = new Array(10);\n\n  const visit = (source, i) => {\n\n    if (isObject(source)) {\n      if (stack.indexOf(source) >= 0) {\n        return;\n      }\n\n      if(!('toJSON' in source)) {\n        stack[i] = source;\n        const target = isArray(source) ? [] : {};\n\n        forEach(source, (value, key) => {\n          const reducedValue = visit(value, i + 1);\n          !isUndefined(reducedValue) && (target[key] = reducedValue);\n        });\n\n        stack[i] = undefined;\n\n        return target;\n      }\n    }\n\n    return source;\n  }\n\n  return visit(obj, 0);\n}\n\nexport default {\n  isArray,\n  isArrayBuffer,\n  isBuffer,\n  isFormData,\n  isArrayBufferView,\n  isString,\n  isNumber,\n  isBoolean,\n  isObject,\n  isPlainObject,\n  isUndefined,\n  isDate,\n  isFile,\n  isBlob,\n  isRegExp,\n  isFunction,\n  isStream,\n  isURLSearchParams,\n  isTypedArray,\n  isFileList,\n  forEach,\n  merge,\n  extend,\n  trim,\n  stripBOM,\n  inherits,\n  toFlatObject,\n  kindOf,\n  kindOfTest,\n  endsWith,\n  toArray,\n  forEachEntry,\n  matchAll,\n  isHTMLForm,\n  hasOwnProperty,\n  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection\n  reduceDescriptors,\n  freezeMethods,\n  toObjectSet,\n  toCamelCase,\n  noop,\n  toFiniteNumber,\n  findKey,\n  global: _global,\n  isContextDefined,\n  toJSONObject\n};\n"]},"metadata":{},"sourceType":"module"}